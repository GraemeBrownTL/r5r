---
title: 'pareto_frontier() to analyze the trade-offs between travel time and monetary cost'
author: "Rafael H. M. Pereira, Marcus Saraiva, Daniel Herszenhut, Carlos Kaue Braga, Matthew Wigginton Conway"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
abstract: "This vignette shows how to use the `pareto_frontier()` function to examine the trade-offs between travel time and monetary cost in travel time matrices in r5r."
urlcolor: blue
vignette: >
  %\VignetteIndexEntry{pareto_frontier() to analyze the trade-offs between travel time and monetary cost} 
  %\VignetteEngine{knitr::rmarkdown} 
  \usepackage[utf8]{inputenc}
bibliography: references.json
---

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>"
)
```

# 1. Introduction

In most cases, transport routing models find either the fastest or the lowest-cost routes that connect places in a given transport network. Sometimes, though, we might want a more sophisticated analysis that considers both the time and monetary costs that public transport passengers have to face. The problem here is that simultaneously accounting for both time and monetary costs is a major challenge for routing models because of the trade-offs between the objectives of minimizing trip duration and cost [(ref 'Getting Charlie off the MTA')](https://www.tandfonline.com/doi/abs/10.1080/13658816.2019.1605075).

To address this problem, `r5r` has a function called `pareto_frontier()`, which calculates the most efficient route possibilities between origin destination pairs considering multiple combinations of travel time and monetary costs. This vignette uses a reproducible example to demonstrate how to use `pareto_frontier()` and interpret its results.



<<<<<<< HEAD
## 2. What the `pareto_frontier` means.
=======
## 2. What the `pareto_frontier` measures and how to interpret the results.
>>>>>>> f65f9fbf0d489f972515349c7f243f70b22b60a2

Imagine a hypothetical journey from A to B. There are multiple route alternatives between this origin and destination with varying combinations of travel time and cost (figure below).

* Walking from A to B would be the **cheapest** option but it would take 50 minutes.
* The **fastest** option would be to take a bus to a subway station and transfer to the subway. This option would only take 15 minutes, but it would cost $8.
* There are some intermediary alternatives, such as taking:
    * a single bus, $3 for 35 min.
    * two buses with one transfer, $5 for 29 min.
    * taking the subway after walking to the station , $6 for 20 min.

This figure illustrates the Pareto frontier of alternative routes from A to B. In other words, it shows the most optimal set of route alternatives between A and B. There are certainly other route options, but there is no other option that is both faster and cheaper at the same time.

```{r, echo = FALSE, fig.width=7, fig.height=4}
library(ggplot2)

# data.frame
df <- structure(list(option = c(1, 2, 3, 4, 5), 
                     modes = c("Walk", "Bus","Bus + Bus", "Subway", "Bus + Subway"), 
                     time = c(50, 35, 29, 20, 15), 
                     cost = c(0, 3, 5, 6, 8)), class = "data.frame", 
                row.names = c(NA, -5L))

# figure
ggplot(data=df, aes(x=cost, y=time, label = modes)) + 
  geom_step(linetype = "dashed") +
  geom_point() +
  geom_text(color='gray30', hjust = -.2, nudge_x = 0.05, angle = 45) +
  labs(title='Pareto frontier of alternative routes from A to B', subtitle = 'Hypotetical example') +
  scale_x_continuous(name="Travel cost ($)", breaks=seq(0,12,3)) +
  scale_y_continuous(name="Travel time (minutes)", breaks=seq(0,60,10)) +
  coord_cartesian(xlim = c(0,15), ylim = c(0, 60)) +
  theme_classic()
```

<br>

This kind of abstraction allows us to have a better grasp of the trade-offs between travel time and monetary cost passengers face when using public transport. It also allows us to calculate cumulative-opportunity accessibility metrics with cutoffs for both time and cost (e.g. the number of jobs reachable from a given origin with limits of 40 minutes and $5) (ref paper by Matt and Anson).

Let's see a couple concrete examples showing how `r5r` can calculate the Pareto frontier for multiple origins.



## 3. Demonstration of `pareto_frontier()`.

### 3.1 Build routable transport network with `setup_r5()`

First, let's build the network and create the routing inputs. In this example we'll be using the a sample data set for the city of Porto Alegre (Brazil) included in `r5r`.

```{r, message = FALSE}
# increase Java memory
options(java.parameters = "-Xmx2G")

# load libraries
library(r5r)
library(sf)
library(data.table)
library(ggplot2)

# build a routable transport network with r5r
data_path <- system.file("extdata/poa", package = "r5r")
r5r_core <- setup_r5(data_path, verbose = FALSE)

# routing inputs
mode <- c('walk', 'transit')
max_walk_dist <- 1000 # meters
max_trip_duration <- 90 # minutes

# load origin/destination points
points <- fread(file.path(data_path, "poa_hexgrid.csv"))

```


### 3.2 Set up the fare calculator

Now we need to set what are the fare rules of our public transport system. These rules will be used by `R5` to calculate the monetary cost of alternative routes. In the case of Porto Alegre, the fare rules are as follows:
* Each bus ticket costs R$ 4.80.
*  Riding a second bus adds R$ 2.40 to the total cost. Subsequent bus rides cost the full ticket price of R$ 4.80.
* Each train ticket costs R$ 4.50. Once a passenger enters a train station, she can take an unlimited amount of train trips as long as she doesnâ€™t leave a station.
* The integrated fare between bus and train has a 10% discount, which totals R$ 8.37.

We create  do this with the support of the `setup_fare_calculator()` function as shown in the code below. A detailed explanation of how to use the fare calculator of `5r5` can be found in [(this other vignette)](https://ipeagit.github.io/r5r/articles/fare_calculator.html).

```{r, eval=FALSE}
# create basic fare calculator
fare_settings <- setup_fare_calculator(r5r_core, 
                                       base_fare = 4.8,
                                       by = "MODE")


# update the cost of bus and train fares
fare_settings$fares_per_mode[, fare := fcase(mode == "BUS", 4.80,
                                             mode == "RAIL", 4.50)]


# update the cost of tranfers
fare_settings$fares_per_transfer[, fare := fcase(first_leg == "BUS" & second_leg == "BUS", 7.2,
                                                 first_leg != second_leg, 8.37)]

<<<<<<< HEAD
=======
```{r, message = FALSE}
# estimate travel time matrix
ttm <- travel_time_matrix(r5r_core,   
                          origins = points,
                          destinations = points,    
                          mode = mode,
                          max_walk_dist = max_walk_dist,
                          max_trip_duration = max_trip_duration,
                          departure_datetime = as.POSIXct("13-05-2019 14:00:00", format = "%d-%m-%Y %H:%M:%S"),
                          verbose = FALSE,
                          time_window = 60,
                          percentiles = c(10, 20, 50, 70, 80)
                          )

head(ttm, n = 10)
>>>>>>> f65f9fbf0d489f972515349c7f243f70b22b60a2

# update transfer_time_allowance to 60 minutes
fare_settings$transfer_time_allowance <- 60

fare_settings$fares_per_mode[mode == "RAIL", unlimited_transfers := TRUE]
fare_settings$fares_per_mode[mode == "RAIL", allow_same_route_transfer := TRUE]



```



<<<<<<< HEAD
### 3.3 Calculating a `pareto_frontier()`.
=======
```{r, message = FALSE}
# estimate accessibility
acc <- r5r::accessibility(r5r_core,   
                          origins = points,
                          destinations = points, 
                          opportunities_colnames = 'schools',
                          mode = mode,
                          max_walk_dist = max_walk_dist,
                          decay_function = "step",
                          cutoffs = 45,
                          departure_datetime = as.POSIXct("13-05-2019 14:00:00", format = "%d-%m-%Y %H:%M:%S"),
                          verbose = FALSE,
                          time_window = 60,
                          percentiles = c(10, 20, 50, 70, 80)
                          )

head(acc, n = 10)

```
```{r detailed head of acc, echo = FALSE, out.width='100%', message = FALSE}
knitr::include_graphics("https://github.com/ipeaGIT/r5r/blob/master/r-package/inst/img/vig_time_window_acc_head.png?raw=true")
```
>>>>>>> f65f9fbf0d489f972515349c7f243f70b22b60a2

One cannot make a faster trip without increasing costs, 
one cannot make a cheaper trip without increasing travel time.


<<<<<<< HEAD
=======
```{r, message = FALSE}
# summarize
df <- acc[, .(min_acc = min(accessibility),
              median = accessibility[which(percentile == 50)],
              max_acc = max(accessibility)), by = id]

# plot
ggplot(data=df) +
  geom_linerange(color='gray', alpha=.5, aes(x = reorder(id, median) , 
                      y=median, ymin=min_acc, ymax=max_acc)) +
  geom_point(color='#0570b0', size=.5, aes(x = reorder(id, median), y=median)) +
  labs(y='N. of schools accessible\nby public transport', x='Origins sorted by accessibility',
       title="Accessibility uncertainty between 2pm and 3pm",
       subtitle = 'Upper limit 10% and lower limit 80% of the times') +
  theme_classic() +
  theme(axis.text.x=element_blank(),
        axis.ticks.x=element_blank())
```
```{r acc_uncertainty figure, echo = FALSE, out.width='100%', message = FALSE}
knitr::include_graphics("https://github.com/ipeaGIT/r5r/blob/master/r-package/inst/img/vig_time_window_acc_uncertainty.png?raw=true")
```
>>>>>>> f65f9fbf0d489f972515349c7f243f70b22b60a2


## References
